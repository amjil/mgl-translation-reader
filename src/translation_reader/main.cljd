(ns translation-reader.main
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter_dotenv/flutter_dotenv.dart" :as dotenv]
   ["package:adaptive_theme/adaptive_theme.dart" :as adaptive]
   ["package:window_manager/window_manager.dart" :as wm]
   [translation-reader.utils.themes :as themes]
   [translation-reader.screens.home :as home]
   [translation-reader.screens.signup :as signup]
   [translation-reader.screens.login :as login]
   [translation-reader.screens.write :as write]
   [translation-reader.services.pref :as pref]
   [translation-reader.states.global :as gs]))

(defn main []
  (m.WidgetsFlutterBinding/ensureInitialized)
  (await (.load dotenv/dotenv .fileName "assets/.env"))
  (await (wm.windowManager/ensureInitialized))

  (let [options (wm/WindowOptions
                 .size (m/Size 800 600)
                 .center true
                 .backgroundColor m.Colors/transparent
                 .skipTaskbar false
                 .titleBarStyle wm.TitleBarStyle/hidden)]
    (wm.windowManager/waitUntilReadyToShow
     options
     ^:async (fn []
               (await (wm.windowManager/show))
               (await (wm.windowManager/focus)))))
  
  (let [initial-theme (await (themes/initial-theme))
        token (await (pref/get-string "user-token"))]
    (when (not-empty token)
      (swap! gs/state assoc :user-token token))
      
    (m/runApp
     (adaptive/AdaptiveTheme
      .light themes/light-theme
      .dark themes/dark-theme
      .initial initial-theme
      .builder (fn [light dark]
                 (m/MaterialApp
                  .title "Welcome to Flutter"
                  .theme light
                  .darkTheme dark
                  ;; .home (home/screen)
                  .initialRoute "/"
                  .routes {"/"  home/screen
                           "/login" login/screen
                           "/signup" signup/screen
                           "/write" write/screen}
                  .debugShowCheckedModeBanner false))))))
