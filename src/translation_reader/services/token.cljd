(ns translation-reader.services.token
  (:require
   [translation-reader.services.pref :as pref]
   [translation-reader.states.global :as gs]
   [translation-reader.utils.util :as util]))

(defn get-token [ctx]
  (stream
   (map (fn [result]
          (swap! gs/state assoc :user-token result)
          :ok-token))
   (map (fn [[er st]]
          (util/show-toast ctx "error get user-id")
          :error-token))
   :as-values
   (.asStream (pref/get-string "user-token"))))

(defn save-token [token]
  (pref/set-string "user-token" token)
  (swap! gs/state assoc :user-token token))

(defn delete-token []
  (pref/remove-value "user-token")
  (swap! gs/state assoc :user-token nil))
