(ns translation-reader.services.article
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/widgets.dart" :as widgets]
   ["package:http/http.dart" :as http]
   ["dart:io" :as io]
   ["dart:convert" :as convert]

   [translation-reader.states.global :as gs]
   [translation-reader.utils.util :as utils]
   [translation-reader.utils.response :as response]
   [translation-reader.services.env :as env]))

(defn article-list [ctx ^widgets/NavigatorState navigator info success-fn]
  (swap! gs/state assoc :is-loading? true)
  (utils/show-indicator ctx)
  (try
    (let [result (await
                  (http/get (Uri/http (env/get "base_url") "/api/articles" info)
                            .headers {"Content-Type" "application/json; charset=UTF-8"
                                      "Authorization" (str "Token " (get @gs/state :user-token))}))]
      (.pop navigator)
      (response/response-message
       ctx
       result
       (fn [x]
         (when-not (nil? success-fn)
           (success-fn)))))
    (catch io/SocketException e
      (utils/show-toast ctx "Socket Exception")
      (when (true? (:is-loading? @gs/state))
        (swap! gs/state assoc :is-loading? false)
        (-> m/Navigator (.of ctx) .pop)))))
